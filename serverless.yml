
service: pedirPizzas

frameworkVersion: '2'

provider:
  name: aws
  runtime: nodejs14.x
  stage: dev
  timeout: 30
  memorySize: 512
  lambdaHashingVersion: 20201221
  apiName: apiGateway-${self:service}-${self:provider.stage}
  region: us-east-1
  environment:
    REGION: ${self:provider.region}
    ENVIROMENT: ${self:provider.stage}
    PENDING_ORDER_QUEUE:
      Ref: PendingOrdersQueue
    PENDING_ORDER_QUEUE_NAME: PendingOrdersQueue
  
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - dynamodb:Query
            - dynamodb:Scan
            - dynamodb:GetItem
            - dynamodb:PutItem
          Resource: "arn:aws:dynamodb:${self:provider.region}:*:table/${self:provider.environment.PENDING_ORDER_QUEUE_NAME}"
        - Effect: Allow
          Action:
            - sqs:SendMessage
          Resource: "arn:aws:sqs:${self:provider.region}:*:${self:provider.environment.PENDING_ORDER_QUEUE_NAME}"

functions:
  hacerPedido:
    handler: handler.hacerPedido
    events:
      - http: 
          method: POST 
          path: /hacerPedido
  prepararPedido:
    handler: handler.prepararPedido
    events:
      - sqs:
          arn:
            Fn::GetAtt:
              - PendingOrdersQueue
              - Arn
          batchSize: 1

resources:
  Resources:
    PendingOrdersQueue:
      Type: AWS::SQS::Queue
      Properties:
        QueueName: ${self:provider.environment.PENDING_ORDER_QUEUE_NAME}
    usersTable:
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:provider.stage}-usersTable-${self:provider.region}
        AttributeDefinitions:
          - AttributeName: id
            AttributeType: S
        KeySchema:
          - AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1